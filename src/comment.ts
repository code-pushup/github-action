import * as core from '@actions/core'
import * as github from '@actions/github'
import fs from 'node:fs/promises'
import type { ActionInputs } from './inputs'

export async function commentOnPR(
  mdPath: string,
  { token }: ActionInputs
): Promise<number> {
  const markdown = await fs.readFile(mdPath, 'utf8')
  const identifier = `<!-- generated by code-pushup/github-action -->`
  const body = truncateBody(`${markdown}\n\n${identifier}\n`)

  const octokit = github.getOctokit(token)

  const comments = await octokit.paginate(octokit.rest.issues.listComments, {
    ...github.context.repo,
    issue_number: github.context.issue.number
  })
  core.debug(
    `Fetched ${comments.length} comments for issue #${github.context.issue.number}`
  )

  const prevComment = comments.find(comment =>
    comment.body?.includes(identifier)
  )
  core.debug(
    prevComment
      ? `Found previous comment ${prevComment.id} from Code PushUp`
      : 'Previous Code PushUp comment not found'
  )

  if (prevComment) {
    const { data: updatedComment } = await octokit.rest.issues.updateComment({
      ...github.context.repo,
      comment_id: prevComment.id,
      body
    })
    core.debug(`Updated body of comment ${updatedComment.url}`)
    return updatedComment.id
  }

  const { data: createdComment } = await octokit.rest.issues.createComment({
    ...github.context.repo,
    issue_number: github.context.issue.number,
    body
  })
  core.debug(`Created new comment ${createdComment.url}`)
  return createdComment.id
}

function truncateBody(body: string): string {
  // 65536 characters is the maximum allowed for issue comments.
  const max = 65536
  const truncateWarning = '...*[Comment body truncated]*'
  if (body.length > max) {
    core.warning(`Comment body is too long. Truncating to ${max} characters.`)
    return body.substring(0, max - truncateWarning.length) + truncateWarning
  }
  return body
}
